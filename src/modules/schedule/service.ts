import { ClassName } from "../../generated/prisma";
import { prisma } from "../../libs/db";
import { ScheduleInput, ScheduleUpdateInput } from "./model";

export const ScheduleService = {
  async getAll() {
    try {
      return await prisma.schedule.findMany({
        orderBy: {
          createdAt: "desc",
        },
      });
    } catch (error) {
      console.error("‚ùå Failed to fetch schedules:", error);
      throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ");
    }
  },

  async create(data: ScheduleInput) {
    try {
      return await prisma.schedule.create({
        data: {
          classesName: data.classesName as ClassName,
          ages: data.ages,
          monday: data.monday ?? "",
          tuesday: data.tuesday ?? "",
          wednesday: data.wednesday ?? "",
          thursday: data.thursday ?? "",
          friday: data.friday ?? "",
          saturday: data.saturday ?? "",
          sunday: data.sunday ?? "",
        },
      });
    } catch (error) {
      console.error("‚ùå Failed to create schedule:", error);
      throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ");
    }
  },

  async update(data: ScheduleUpdateInput) {
    try {
      const found = await prisma.schedule.findUnique({
        where: { id: data.id },
      });

      if (!found) {
        const err: any = new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï");
        err.status = 404; // üü© ‡πÉ‡∏™‡πà status ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏¢‡∏ô error ‡πÑ‡∏õ‡∏¢‡∏±‡∏á errorHandler
        throw err;
      }

      return await prisma.schedule.update({
        where: { id: data.id },
        data: {
          classesName: data.classesName as ClassName,
          ages: data.ages,
          monday: data.monday ?? "",
          tuesday: data.tuesday ?? "",
          wednesday: data.wednesday ?? "",
          thursday: data.thursday ?? "",
          friday: data.friday ?? "",
          saturday: data.saturday ?? "",
          sunday: data.sunday ?? "",
        },
      });
    } catch (error) {
      console.error("‚ùå Failed to update schedule:", error);
      throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ");
    }
  },

  async delete(id: string) {
    try {
      const found = await prisma.schedule.findUnique({
        where: { id },
      });

      if (!found) {
        const err: any = new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö");
        err.status = 404; // üü© ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ HTTP
        throw err;
      }

      await prisma.schedule.delete({
        where: { id },
      });

      return { message: "‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" };
    } catch (error) {
      console.error("‚ùå Failed to delete schedule:", error);
      throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ");
    }
  },

  async getById(id: string) {
    try {
      const schedule = await prisma.schedule.findUnique({
        where: { id },
      });

      if (!schedule) {
        const err: any = new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£");
        err.status = 404; // üü© status 404
        throw err;
      }

      return schedule;
    } catch (error) {
      console.error("‚ùå Failed to fetch schedule by id:", error);
      throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ");
    }
  },
};
